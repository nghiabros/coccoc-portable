name: Build ChromePlus Portable (CocCoc x86)

on:
  schedule:
    - cron: '0 0 * * *'  # Runs once a day at 00:00 UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and Install CocCoc (x86)
        id: coccoc-install
        shell: powershell
        run: |
          try {
            $coccocUrl = "https://files.coccoc.com/browser/coccoc_standalone_en.exe"
            $installer = "$env:TEMP\coccoc_standalone_en.exe"
            Write-Host "Downloading CocCoc (x86)..." -ForegroundColor Yellow
            (New-Object System.Net.WebClient).DownloadFile($coccocUrl, $installer)
            Write-Host "Installing CocCoc..." -ForegroundColor Yellow
            Start-Process -FilePath $installer -ArgumentList "/silent /install" -Wait
          } catch {
            Write-Error "Failed to download or install CocCoc: $($_.Exception.Message)"
            exit 1
          }

      - name: Get CocCoc version
        id: coccoc-version
        shell: powershell
        run: |
          try {
            $app = 'C:\Program Files (x86)\CocCoc\Browser\Application'
            if (-not (Test-Path $app)) {
              Write-Error "CocCoc not found at $app"
              exit 1
            }
            $ver = (Get-ChildItem $app -Directory | Sort-Object Name -Descending | Select-Object -First 1).Name
            Write-Host "Detected CocCoc version: $ver"
            "COCCOC_VERSION=$ver" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } catch {
            Write-Error "Failed to get CocCoc version: $($_.Exception.Message)"
            exit 1
          }

      - name: Get ChromePlus version
        id: chromeplus-version
        shell: powershell
        run: |
          $version = Get-Content -Path '.\chromeplus-version.txt' -Raw
          "CHROMEPLUS_VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Using ChromePlus version: $version"

      - name: Check if release exists
        id: check-release
        shell: powershell
        run: |
          $tag = "coccoc-portable-x86_${{ steps.coccoc-version.outputs.COCCOC_VERSION }}_${{ steps.chromeplus-version.outputs.CHROMEPLUS_VERSION }}"
          $headers = @{
            'Authorization' = "token ${{ secrets.GITHUB_TOKEN }}"
            'Accept' = 'application/vnd.github.v3+json'
          }
          $url = "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag"
          $response = Invoke-WebRequest -Uri $url -Headers $headers -Method GET -ErrorAction SilentlyContinue
          if ($response.StatusCode -eq 200) {
            Write-Host "Release already exists for tag: $tag"
            "RELEASE_EXISTS=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "RELEASE_TAG=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            "RELEASE_EXISTS=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "RELEASE_TAG=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Exit if release exists
        if: steps.check-release.outputs.RELEASE_EXISTS == 'true'
        shell: powershell
        run: |
          Write-Host 'Release already exists — skipping build' -ForegroundColor Yellow
          exit 0

      - name: Prepare portable package
        shell: powershell
        run: |
          $app = 'C:\Program Files (x86)\CocCoc\Browser\Application'
          $ver = '${{ steps.coccoc-version.outputs.COCCOC_VERSION }}'
          $src = "$app\$ver"
          $dest = ".\dist"
          if (Test-Path $dest) { Remove-Item $dest -Recurse -Force }
          Copy-Item $src $dest -Recurse -Force
          Write-Host "Copied CocCoc files to dist folder"

      - name: Create archive
        id: create-archive
        shell: powershell
        run: |
          $chromeplusVersion = "${{ steps.chromeplus-version.outputs.CHROMEPLUS_VERSION }}"
          $archivePath = "${{ github.workspace }}\chromeplus-portable-$chromeplusVersion.zip"
          
          $items = @(
            ".\dist\*",
            ".\chrome+.ini",
            ".\debloat.reg",
            ".\update.bat",
            ".\default-apps-multi-profile.bat"
          )

          Compress-Archive -Path $items -DestinationPath $archivePath -Force
          "ARCHIVE_PATH=$archivePath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Archive created at: $archivePath"

      - name: Verify and clean up
        shell: powershell
        run: |
          $archivePath = "${{ steps.create-archive.outputs.ARCHIVE_PATH }}"
          $verifyDir = ".\check-temp"
          Write-Host "Verifying archive contents..." -ForegroundColor Cyan
          if (Test-Path $verifyDir) { Remove-Item $verifyDir -Recurse -Force }
          Expand-Archive -Path $archivePath -DestinationPath $verifyDir -Force
          Get-ChildItem $verifyDir -Recurse
          Remove-Item $verifyDir -Recurse -Force
          if (Test-Path ".\dist") { Remove-Item ".\dist" -Recurse -Force }
          Write-Host "Clean-up completed." -ForegroundColor DarkGreen

      - name: Create GitHub release
        shell: powershell
        run: |
          $tag = "${{ steps.check-release.outputs.RELEASE_TAG }}"
          $archivePath = "${{ steps.create-archive.outputs.ARCHIVE_PATH }}"
          gh release create $tag $archivePath --repo "${{ github.repository }}" --title $tag --notes "Automatic build of CocCoc Portable"
          Write-Host "Release created successfully: $tag"

      - name: Summary
        shell: powershell
        run: |
          $releaseExists = "${{ steps.check-release.outputs.RELEASE_EXISTS }}"
          $releaseTag = "${{ steps.check-release.outputs.RELEASE_TAG }}"

          if ($releaseExists -eq "true") {
            Write-Host 'Release exists — skipped' -ForegroundColor Yellow
          } else {
            Write-Host "Created release $releaseTag" -ForegroundColor Green
          }
